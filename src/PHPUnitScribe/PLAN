Instrumentation:
first break out any compound statements if they include external refs
potential nodes for compound statements:
    if conditions
    function/constructor args
    closure args
    array declarations
    array fetches
    switch and case conditions
    while condition
    do/while condition
    return

Any compound statement has to be bubbled up until we get to a node which is:
    in an array of nodes and
    not inside a potential compound statement

When you find a potential compound statment:
    make a new traverser and new node visitor
    set nodevisitor's 'looking for compound statement' flag
    traverse condition/arguments
    if external reference is found:
        create new var to assign it to,
        build statement, add it to queue,
        replace statement with new var
    on exiting compound statment, write references from queue

external refs:
    FuncCall
    Exit
    Include
    MethodCall
    New
    PropertyFetch
    ShellExec
    StaticCall
    StaticPropertyFetch

if assignment ->
Questions:
we can't just add namespace{} around all the instrumented code,
any absolute namespacing in the code will break that.  Have to modify each call

REPL:
We will build the test file one statement at a time.
We need to identify each external reference and restart the test so the reference can be instrumented.
We need to present a repl experience but execute the user's statements in the context of
    a class that extends PHPUnit_Base_Test, so we write a shadow version of the test
    file and add instrumentation. The instrumentation identifies external files and returns them.

$previous_output = '""'
while !exit(0):
    $previous_output and $previous_exit are assigned by shelling out to the runtime with $previous_output:
        load phpunit
        parse test file
        foreach file in filelist:
            if instrumented file is older or doesn't exist:
                instrument with full chooser and fix namespaces and save a shadow
            include shadow file
        nextline = $previous_output || read next line
        parse nextline
        write a shadow test file in my namespace with the next line instrumented
            with the file-finder and all external references instrumented with the
            in/out chooser and namespaces fixed.
        write the original file with the next line added (or wait until the end?)
        load the shadow test file
        run setup in the shadow test file
        run the test method in the shadow test file:
            file-finder instrumentation:
                parse statement
                foreach external reference:
                    use reflectionclass to determine filename
                    if file isn't already instrumented:
                        add file(s) to filelist
                return list of new files found
        add files to filelist, add next line, write original test
        exit with finished_statement code and pass the remaining statements as output



Execution:
- Load setup
- Load any instrumented files listed in test
- Read statement
- Identify external calls (require/include, new, globals)
- Find file(s) containing external code
- If file is not in list of instrumented files,
    - add it to the list
    - write a test containing the list and all statements so far
    - restart
- Else, modify the call to use the instrumented file
- Execute statement and prompt for interception of any external calls in it
- Write test to file
- Restart with fast-forward

Instrumenting external calls:
1) Break complex statements out
if ($obj->method($GLOBALS['var']))
becomes
$phpunitscribe_var01 = $GLOBALS['var'];
$phpunitscribe_var02 = $obj->method($phpunitscribe_var01);
if ($phpunitscribe_var02)

or
if ($this->class_var = $GLOBALS['var'])
becomes
$pus_var01 = $GLOBALS['var'];
if ($this->class_var = $pus_var01)

2) Replace each external reference with a block like
list($action, $value) = PHPUnitScribe_Interceptor::intercept( 'original_statement;');
if ($action == PHPUnitScribe_Interceptor::$none) {}
else if ($action == PHPUnitScribe_Interceptor::$into) {
    namespaced_statement;
}
else if ($action == PHPUnitScribe_Interceptor::$over) {
    PHPUnitScribe_Interceptor::disable();
    namespaced_statement;
    PHPUnintScribe_Interceptor::enable();
}
else if ($action == PHPUnitScribe_Interceptor::$replace) {
    $assigned_var = $value;
}

Interception:
If external reference is to an uninstrumented file, instument it, save it, add it to list and start over
If external reference is not a variable assignment, do not allow replacement
